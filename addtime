#!/bin/bash

# read times from stdin and add them up.
#

# defaults
delimiter=:
short=false

# how to exit on error
errexit() {
  echo $@
  exit 1
}

# check for missing dependencies
for dependency in bc cat getopt tr; do
  command -v $dependency >/dev/null || errexit "Dependency $dependency not found."
done
unset dependency

# usage/help
# contains literal tabs in here-doc
usage() {
  cat <<-EOF
	Add a list of times from standard input using day:hour:minute:second format.
	All fields but seconds are optional. Field separator is ':' by default. One
	measurement of time per line.

	Usage: ${0##*/} [-d|--delimiter] [-h|--help]
	Options:
	  -d, --delimiter DELIM
	    Use DELIM instead of : for field delimiter
	  -h, --help
	    This message
	  -s, --short
	    Don't print "Total time:" with the output
	  -H, --hours
	    Output in hours:minutes:seconds
	  -M, --minutes
	    Output in minutes:seconds
	  -S, --seconds
	    Output in seconds
	EOF
}

# get options
opts=$(getopt -o d:hsHMS -l delimiter:,help,short,hours,minutes,seconds -n ${0##*/} -- "$@")
[[ $? == 0 ]] || errexit "Could not get command line options."

# parse options
eval set -- "$opts"
while [[ $1 != '--' ]]; do
  case $1 in
    -d|--delimiter)
      delimiter="$2"
      shift 2
      ;;
    -s|--short)
      short=true
      shift 1
      ;;
    -H|--hours)
      resolution=H
      shift 1
      ;;
    -M|--minutes)
      resolution=M
      shift 1
      ;;
    -S|--seconds)
      resolution=S
      shift 1
      ;;
    -h|--help|*)
      usage
      exit
      ;;
  esac
done

# make sure delimiter is only one character
[[ ${#delimiter} != 1 ]] && errexit "Delimiter must be one character."

# declare array total
declare -A total=([seconds]=0 [minutes]=0 [hours]=0 [days]=0)

# while consuming input
while read time; do

# make sure input contains only numbers, delimiters, or periods
  [[ $time =~ ^[0-9${delimiter}.]+$ ]] || errexit "Input should only contain digits, ${delimiter}, and '.': $time"

# pad input with $delimiter to help with rudimentary shifting
  time=${delimiter}${time}

  for unit in seconds minutes hours days; do
    if [[ $time != $delimiter && -n $time ]]; then
# add rightmost field to total[$unit]
      total[$unit]=$(bc <<< "${total[$unit]} + ${time##*$delimiter}")

# strip ${delimiter} and last field from right of string
      time=${time%${delimiter}${time##*$delimiter}}
    fi
  done
  unset unit

# if string is not empty after processing 4 fields, print error and exit 1
  if [[ -n $time ]]; then
    errexit "Input seems to contain too many fields. Please limit to seconds, hours, minutes, days."
  fi

done

# whole groups of 60 (seconds/60) get added to minutes
total[minutes]=$(bc <<< "${total[minutes]} + (${total[seconds]} / 60)")

# seconds are the remainder of seconds/60
total[seconds]=$(bc <<< "${total[seconds]} % 60")

# whole groups of 60 (minutes/60) get added to hours
total[hours]=$(bc <<< "${total[hours]} + (${total[minutes]} / 60)")

# minutes are the remainder of minutes/60
total[minutes]=$(bc <<< "${total[minutes]} % 60")

# whole groups of 24 (hours/24) get added to days
total[days]=$(bc <<< "${total[days]} + (${total[hours]} / 24)")

# hours are the remainder of hours/24
total[hours]=$(bc <<< "${total[hours]} % 24")

# collapse days into hours if resolution is hours, minutes, or seconds
case $resolution in
  H|M|S)
    total[hours]=$(( ${total[days]} * 24 + ${total[hours]} ))
    total[days]=0
    ;;
esac

# collapse hours into minutes if resolution is minutes or seconds
case $resolution in
  M|S)
    total[minutes]=$(( ${total[hours]} * 60 + ${total[minutes]} ))
    total[hours]=0
    ;;
esac

# collapse minutes into seconds if resolution is seconds
if [[ $resolution == S ]]; then
  total[seconds]=$(( ${total[minutes]} * 60 + ${total[seconds]} ))
  total[minutes]=0
fi

# zero pad seconds if < 10
if [[ $(bc <<< "${total[seconds]} < 10") -eq 1 ]]; then
  total[seconds]=0${total[seconds]}
fi

# zero pad minutes if < 10
if [[ $(bc <<< "${total[minutes]} < 10") -eq 1 ]]; then
  total[minutes]=0${total[minutes]}
fi

# zero pad hours if < 10
if [[ $(bc <<< "${total[hours]} < 10") -eq 1 ]]; then
  total[hours]=0${total[hours]}
fi

# final total
finaltotal=${total[days]}${delimiter}${total[hours]}${delimiter}${total[minutes]}${delimiter}${total[seconds]}

# drop each leading field if 0, until seconds
while [[ $finaltotal =~ ^0+${delimiter} ]]; do
  finaltotal=${finaltotal#*$delimiter}
done

# print fancy output unless -s|--short
$short || printf "Total time: "

# print total
echo $finaltotal
