#!/bin/bash

# if $1, print brief help
if [[ -n $1 ]]; then
	cat <<-EOF
		Add a list of times from standard input using day:hour:minute:second format.
		All fields but seconds are optional. Field separator may be any non-numeric
		character but must be consistent across each line of input. Only one
		measurement of time per line.
	EOF
  exit 0
fi

# how to exit on error
errexit() {
  echo $@
  exit 1
}

# check for missing dependencies
for dependency in tr; do
  command -v $dependency >/dev/null || errexit "Dependency $dependency not found."
done
unset dependency

# declare array total
declare -A total=([seconds]=0 [minutes]=0 [hours]=0 [days]=0)

# while consuming input
while read time; do

# automatically identify time field delimiter
# sift non-numeric characters from $time
  delimiter=$(echo $time|tr -d [0-9])

# non-empty remains signifies non-numeric characters remain
  if [[ -n $delimiter ]]; then

# if something remains after the first of non-numeric chars is removed, we have a second non-numeric char and delimiter
# confusion
    if [[ -n $(echo $delimiter | tr -d ${delimiter:0:1}) ]]; then
      errexit "Error: Too many non-digital characters. Invisible color codes maybe?"
    fi

# otherwise we have only a single type of non-numeric character and a clear delimiter
    delimiter=${delimiter:0:1}
    time=${delimiter}${time}
  fi

  for unit in seconds minutes hours days; do
    if [[ $time != $delimiter && -n $time ]]; then
# add rightmost field to total[$unit]
# need to force base 10 because of leading 0s
      total[$unit]=$((10#${total[$unit]} + 10#${time##*$delimiter}))

# strip ${delimiter}${time##*$delimiter} from right of string
      time=${time%${delimiter}${time##*$delimiter}}
    fi
  done
  unset unit

# if string is not empty after processing 4 fields, print error and exit 1
  if [[ -n $time ]]; then
    errexit "Input seems to contain too many fields. Please limit to seconds, hours, minutes, days."
  fi

done

# whole groups of 60 (seconds/60) get added to minutes
total[minutes]=$((${total[minutes]} + (${total[seconds]} / 60)))

# seconds are the remainder of seconds/60
total[seconds]=$((${total[seconds]} % 60))

# zero fill seconds if <= 9
if [[ ${total[seconds]} -le 9 ]]; then
  total[seconds]=0${total[seconds]}
fi

# whole groups of 60 (minutes/60) get added to hours
total[hours]=$((${total[hours]} + (${total[minutes]} / 60)))

# minutes are the remainder of minutes/60
total[minutes]=$((${total[minutes]} % 60))

# zero fill minutes if <= 9
if [[ ${total[minutes]} -le 9 ]]; then
  total[minutes]=0${total[minutes]}
fi

# whole groups of 24 (hours/24) get added to days
total[days]=$((${total[days]} + (${total[hours]} / 24)))

# hours are the remainder of hours/24
total[hours]=$((${total[hours]} % 24))

# zero fill hours if <= 9
if [[ ${total[hours]} -le 9 ]]; then
  total[hours]=0${total[hours]}
fi

# print ${total[days]} ${total[hours]}  ${total[minutes]} ${total[seconds]}
echo Total time: ${total[days]}:${total[hours]}:${total[minutes]}:${total[seconds]}
